"use strict";(self.webpackChunk_biomathcode_react_medicine_select=self.webpackChunk_biomathcode_react_medicine_select||[]).push([[449],{"./src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>MedicineSelect});var jsx_runtime=__webpack_require__("../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js"),react_select_async_esm=__webpack_require__("../../node_modules/.pnpm/react-select@5.10.2_@types+react@18.3.13_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-select/async/dist/react-select-async.esm.js"),react=__webpack_require__("../../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");const AsyncSelectAny=react_select_async_esm.A,MedicineSelect=(0,react.forwardRef)(({...props},ref)=>(0,jsx_runtime.jsx)(AsyncSelectAny,{cacheOptions:!0,defaultOptions:!0,loadOptions:async inputValue=>(await async function fetchMedicines(query){if(!query)return[];const res=await fetch(`https://clinicaltables.nlm.nih.gov/api/rxterms/v3/search?terms=${encodeURIComponent(query)}&maxList=20`);return(await res.json())[1]}(inputValue)).map(m=>({label:m,value:m})),ref,...props}));MedicineSelect.displayName="MedicineSelect",MedicineSelect.__docgenInfo={description:"",methods:[],displayName:"MedicineSelect",props:{onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: any) => void",signature:{arguments:[{type:{name:"any"},name:"value"}],return:{name:"void"}}},description:""},defaultValue:{required:!1,tsType:{name:"union",raw:"MedicineOption | MedicineOption[]",elements:[{name:"signature",type:"object",raw:"{ label: string; value: string }",signature:{properties:[{key:"label",value:{name:"string",required:!0}},{key:"value",value:{name:"string",required:!0}}]}},{name:"Array",elements:[{name:"signature",type:"object",raw:"{ label: string; value: string }",signature:{properties:[{key:"label",value:{name:"string",required:!0}},{key:"value",value:{name:"string",required:!0}}]}}],raw:"MedicineOption[]"}]},description:""},isMulti:{required:!1,tsType:{name:"boolean"},description:""},placeholder:{required:!1,tsType:{name:"string"},description:""}}}},"./src/stories/Form.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{MultiSelect:()=>MultiSelect,SingleSelect:()=>SingleSelect,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"),___WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/index.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"Medicine/Select/FormExample",component:___WEBPACK_IMPORTED_MODULE_2__.F},SingleSelect=(args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("form",{onSubmit:e=>{e.preventDefault();const value=new FormData(e.currentTarget).get("medicine");alert(JSON.stringify(value,null,2))},style:{width:400,display:"flex",flexDirection:"column",gap:16},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("label",{style:{fontWeight:600},children:"Select Medicine"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.F,{...args,name:"medicine"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("button",{type:"submit",style:{padding:"8px 16px",cursor:"pointer"},children:"Submit"})]})).bind({});SingleSelect.args={isMulti:!1,placeholder:"Search for a medicine..."};const MultiSelect=(args=>{const selectRef=(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("form",{onSubmit:e=>{e.preventDefault();const value=selectRef.current?.getValue();console.log("input",value),alert(JSON.stringify(value,null,2))},style:{width:400,display:"flex",flexDirection:"column",gap:16},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("label",{style:{fontWeight:600},children:"Select Medicine"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.F,{...args,ref:selectRef}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("button",{type:"submit",style:{padding:"8px 16px",cursor:"pointer"},children:"Submit"})]})}).bind({});MultiSelect.args={isMulti:!0,placeholder:"Select multiple medicines..."};const __namedExportsOrder=["SingleSelect","MultiSelect"];SingleSelect.parameters={...SingleSelect.parameters,docs:{...SingleSelect.parameters?.docs,source:{originalSource:'args => {\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const value = formData.get("medicine"); // get value by field name\n\n    alert(JSON.stringify(value, null, 2));\n  };\n  return <form onSubmit={handleSubmit} style={{\n    width: 400,\n    display: "flex",\n    flexDirection: "column",\n    gap: 16\n  }}>\n            <label style={{\n      fontWeight: 600\n    }}>Select Medicine</label>\n            <MedicineSelect {...args} name="medicine" />\n            <button type="submit" style={{\n      padding: "8px 16px",\n      cursor: "pointer"\n    }}>\n                Submit\n            </button>\n        </form>;\n}',...SingleSelect.parameters?.docs?.source}}},MultiSelect.parameters={...MultiSelect.parameters,docs:{...MultiSelect.parameters?.docs,source:{originalSource:'args => {\n  const selectRef = useRef<any>(null); // ref to AsyncSelect\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    const value = selectRef.current?.getValue(); // get selected value(s) directly\n    console.log(\'input\', value);\n    alert(JSON.stringify(value, null, 2));\n  };\n  return <form onSubmit={handleSubmit} style={{\n    width: 400,\n    display: "flex",\n    flexDirection: "column",\n    gap: 16\n  }}>\n            <label style={{\n      fontWeight: 600\n    }}>Select Medicine</label>\n            <MedicineSelect {...args} ref={selectRef} // attach ref\n    />\n            <button type="submit" style={{\n      padding: "8px 16px",\n      cursor: "pointer"\n    }}>\n                Submit\n            </button>\n        </form>;\n}',...MultiSelect.parameters?.docs?.source}}}}}]);